# -*- coding: utf-8 -*-
"""used_car_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnVgerkp9qAAhU0GEY2R4k3y0698hVUQ
"""

import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import re
from google.colab import files

# Upload the file
uploaded = files.upload()

# Assuming the file is named 'used_car_dataset.csv'
df = pd.read_csv('used_car_dataset.csv')

# Descriptive statistics with a gradient background
df.describe().T.style.background_gradient(cmap="viridis")

# Create a copy of the dataframe
df1 = df.copy()

# Extract the car brand name
df1['car_name'] = df['car_name'].apply(lambda x: x.split(' ')[0])

# Drop the 'city' column
df1.drop(['city'], axis=1, inplace=True)

# Function to convert the price to a float
def convert(x):
    if ',' in x:
        s = x.split(' ')[1].split(',')
        return float(s[0] + s[1])
    else:
        value = float(x.split(' ')[1])
        return value * 100000

# Apply the conversion function to the price column
df2 = df1.copy()
df2['car_price_in_rupees'] = df['car_price_in_rupees'].apply(convert)

# Display the first few rows of the new dataframe
df2.head()

df3 = df2.copy()
df3['kms_driven'] = df2['kms_driven'].apply(lambda x : x.split(' ')[0])
df3.head()

df4 = df3.copy()
df4['kms_driven'] = df3['kms_driven'][df3['kms_driven'].str.len() > 4]
def removeComma(x):
    if ',' in x :
        s = x.split(',')
        return float(s[0] + s[1])
df4 = df3.copy()
df4.kms_driven = df4.kms_driven.dropna()
df4.info()

df5 = df4.copy()
df5['kms_driven'] = df4['kms_driven'].apply(removeComma)
df5.head()

filtered_df = df5[df5['car_name'].apply(lambda x: df5['car_name'].value_counts().get(x, 0) > 20)]
filtered_df.head()

df_6 = filtered_df[filtered_df.car_price_in_rupees > 100000]
df_6.describe()

df7 = df_6[df_6.kms_driven > 1000]
df7.describe()

df8 = df7[df7['fuel_type'].apply(lambda x: df7['fuel_type'].value_counts().get(x, 0) > 500)]
df8.fuel_type.unique()

dummies = pd.get_dummies(df8.car_name)
df9 = pd.concat([df8, dummies],axis=1)
dummies_2 = pd.get_dummies(df9.fuel_type)
df10 = pd.concat([df9, dummies_2],axis=1)
df10.head()

"""price_ranges = [0, 500000, 1000000, 1500000, np.inf]
price_labels = ['Low', 'Medium', 'High', 'Very High']
df10['price_category'] = pd.cut(df10['car_price_in_rupees'], bins=price_ranges, labels=price_labels)
df10.head()
"""

X = df10.drop('price_category', axis=1)
X = pd.get_dummies(X, columns=['car_name', 'fuel_type'], drop_first=True)  # One-hot encoding
y = df10['price_category']
X.head()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
split_ratios = [(0.7, 0.3), (0.6, 0.4), (0.5, 0.5), (0.8, 0.2)]
results = []
for train_ratio, test_ratio in split_ratios:
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_ratio, random_state=42)
    result = {
        'Train Ratio': train_ratio,
        'Test Ratio': test_ratio
    }
    nb_classifier = MultinomialNB()
    nb_classifier.fit(X_train, y_train)
    nb_predictions = nb_classifier.predict(X_test)
    nb_accuracy = accuracy_score(y_test, nb_predictions)
    svm_classifier = SVC()
    svm_classifier.fit(X_train, y_train)
    svm_predictions = svm_classifier.predict(X_test)
    svm_accuracy = accuracy_score(y_test, svm_predictions)
    simple_knn_classifier = KNeighborsClassifier()
    simple_knn_classifier.fit(X_train, y_train)
    simple_knn_predictions = simple_knn_classifier.predict(X_test)
    simple_knn_accuracy = accuracy_score(y_test, simple_knn_predictions)
    weighted_knn_classifier = KNeighborsClassifier(weights='distance')
    weighted_knn_classifier.fit(X_train, y_train)
    weighted_knn_predictions = weighted_knn_classifier.predict(X_test)
    weighted_knn_accuracy = accuracy_score(y_test, weighted_knn_predictions)
    nb_accuracy = accuracy_score(y_test, nb_predictions)
    svm_accuracy = accuracy_score(y_test, svm_predictions)
    simple_knn_accuracy = accuracy_score(y_test, simple_knn_predictions)
    weighted_knn_accuracy = accuracy_score(y_test, weighted_knn_predictions)
    results.append({
        'Train Ratio': train_ratio,
        'Test Ratio': test_ratio,
        'Naive Bayes Accuracy': nb_accuracy,
        'SVM Accuracy': svm_accuracy,
        'Simple KNN Accuracy': simple_knn_accuracy,
        'Weighted KNN Accuracy': weighted_knn_accuracy
    })
results_df = pd.DataFrame(results)
print(results_df)
results_df_sorted = results_df.sort_values(by='Simple KNN Accuracy', ascending=False)
best_combination = results_df_sorted.iloc[0]
print("Best Combination:")
print(best_combination)

df10.hist(figsize = (30, 25), bins = 30, legend = False)
plt.show()
df10.info()